<?xml version="1.0"?>
<!--
~ Hibernate, Relational Persistence for Idiomatic Java
~
~ Copyright (c) 2013, Red Hat Inc. or third-party contributors as
~ indicated by the @author tags or express copyright attribution
~ statements applied by the authors.  All third-party contributions are
~ distributed under license by Red Hat Inc.
~
~ This copyrighted material is made available to anyone wishing to use, modify,
~ copy, or redistribute it subject to the terms and conditions of the GNU
~ Lesser General Public License, as published by the Free Software Foundation.
~
~ This program is distributed in the hope that it will be useful,
~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
~ for more details.
~
~ You should have received a copy of the GNU Lesser General Public License
~ along with this distribution; if not, write to:
~ Free Software Foundation, Inc.
~ 51 Franklin Street, Fifth Floor
~ Boston, MA  02110-1301  USA
-->
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">

<!--
    This mapping demonstrates the use of database-level cascade
    entity removal with composite ids mapped using key-many-to-one
    feature. Essentially a composite id where part
    of the composition is a foreign-key to another entity.
-->

<hibernate-mapping package="org.hibernate.test.keymanytoone.bidir.ondelete">

    <class name="Customer" table="CUSTOMERS">
        <id name="id" column="ID" type="long">
            <generator class="increment" />
        </id>
        <property name="name" column="NAME" type="string" />
        <!-- Bidirectional relation. -->
        <bag name="orders" inverse="true" lazy="false" fetch="join">
            <key column="CUSTOMER_ID" on-delete="cascade" />
            <one-to-many class="Order" />
        </bag>
    </class>

    <class name="Order" table="ORDERS">
        <!-- Bidirectional relation. -->
        <composite-id>
            <key-many-to-one name="customer" column="CUSTOMER_ID" class="Customer" lazy="false" />
            <key-property name="number" column="ORDER_NUMBER" type="long" />
        </composite-id>
        <property name="item" column="ITEM_DESCRIPTION" type="string" />
    </class>

</hibernate-mapping>
