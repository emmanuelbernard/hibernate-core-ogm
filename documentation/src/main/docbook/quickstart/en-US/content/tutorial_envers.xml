<?xml version='1.0' encoding='UTF-8' ?>

<chapter xmlns="http://docbook.org/ns/docbook">
    <title>Tutorial Using Envers</title>

    <para>
      This tutorial is located within the download bundle under <filename>envers</filename>.
    </para>
    <itemizedlist>
      <title>Objectives</title>
      <listitem>
        <para>
          Configure Envers.
        </para>
      </listitem>
      <listitem>
        <para>
          Use the Envers APIs to view and analyze historical data.
        </para>
      </listitem>
    </itemizedlist>

    <section xml:id="hibernate-gsg-tutorial-envers-config">
      <title><filename>persistence.xml</filename></title>
      <para>
        This file was discussed in the <systemitem>JPA</systemitem> tutorial in <xref
        linkend="hibernate-gsg-tutorial-jpa-config" />, and is essentially the same here.
      </para>
    </section>

    <section xml:id="hibernate-gsg-tutorial-envers-entity">
      <title>The annotated entity Java class</title>
      <para>
        Again, the entity is largely the same as in <xref linkend="hibernate-gsg-tutorial-jpa-entity" />.  The major
        difference is the addition of the <interfacename>@org.hibernate.envers.Audited</interfacename> annotation, which
        tells Envers to automatically track changes to this entity.
      </para>
    </section>

    <section xml:id="hibernate-gsg-tutorial-envers-test">
      <title>Example code</title>
      <para>
        Again, this tutorial makes use of the <systemitem>JPA</systemitem> APIs.  However, the code also makes a change to one
        of the entities, then uses the Envers API to pull back the initial <firstterm>revision</firstterm> as well as the updated
        revision. A revision refers to a version of an entity.
      </para>
      <example xml:id="hibernate-gsg-tutorial-envers-test-api">
        <title>Using the <interfacename>org.hibernate.envers.AuditReader</interfacename></title>
        <programlisting role="JAVA">public void testBasicUsage() {
    ...
    AuditReader reader = AuditReaderFactory.get( entityManager );
    Event firstRevision = reader.find( Event.class, 2L, 1 );
    ...
    Event secondRevision = reader.find( Event.class, 2L, 2 );
    ...
}</programlisting>
      </example>
      <procedure>
        <title>Description of Example</title>
        <step>
          <para>
            An <interfacename>org.hibernate.envers.AuditReader</interfacename> is obtained from the
            <classname>org.hibernate.envers.AuditReaderFactory</classname> which wraps the
            <interfacename>javax.persistence.EntityManager</interfacename>.
          </para>
        </step>
        <step>
          <para>
            Next, the <methodname>find</methodname> method retrieves specific revisions of the entity.  The first call
            reads <literal>find revision number 1 of Event with id 2</literal>.  The second call reads <literal>find
            revision number 2 of Event with id 2</literal>.
          </para>
        </step>
      </procedure>
    </section>

    <section xml:id="hibernate-gsg-tutorial-annotations-further">
      <title>Take it further!</title>
      <itemizedlist>
        <title>Practice Exercises</title>
        <listitem>
            <para>
                Provide a custom revision entity to additionally capture who made the changes.
            </para>
        </listitem>
        <listitem>
            <para>
                Write a query to retrieve only historical data which meets some criteria. Use the
                <citetitle pubwork="book">Envers User Guide</citetitle> to see how Envers queries are constructed.
            </para>
        </listitem>
        <listitem>
            <para>
                Experiment with auditing entities which have many-to-one, many-to-many relations as well as collections.
                Try retrieving historical versions (revisions) of such entities and navigating the object tree.
            </para>
        </listitem>
      </itemizedlist>
    </section>

</chapter>