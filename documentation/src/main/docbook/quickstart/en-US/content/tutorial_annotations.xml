<?xml version='1.0' encoding='UTF-8' ?>

<chapter xmlns="http://docbook.org/ns/docbook">
    <title>Tutorial Using Native Hibernate APIs and Annotation Mappings</title>

    <para>
        This tutorial is located within the download bundle under <filename>annotations</filename>.
    </para>
    <itemizedlist>
      <title>Objectives</title>
      <listitem>
        <para>
          Use annotations to provide mapping information
        </para>
      </listitem>
      <listitem>
        <para>
          Use the <phrase>native</phrase> Hibernate APIs
        </para>
      </listitem>
    </itemizedlist>


    <section xml:id="hibernate-gsg-tutorial-annotations-config">
        <title>The Hibernate configuration file</title>

        <para>
            The contents are identical to <xref linkend="hibernate-gsg-tutorial-basic-config"/>, with one important
            difference.  The <varname>mapping</varname> element at the very end naming the annotated entity class using
            the <option>class</option> attribute.
        </para>
    </section>

    <section xml:id="hibernate-gsg-tutorial-annotations-entity">
        <title>The annotated entity Java class</title>
        <para>
            The entity class in this tutorial is <classname>org.hibernate.tutorial.annotations.Event</classname> which
            follows JavaBean conventions.  In fact the class itself is identical to the one in <xref
            linkend="hibernate-gsg-tutorial-basic-entity"/>, except that annotations are used to provide the metadata,
            rather than a separate <filename>hbm.xml</filename> file.
        </para>

        <example xml:id="hibernate-gsg-tutorial-annotations-entity-entity">
            <title>Identifying the class as an entity</title>
            <programlisting role="JAVA">@Entity
@Table( name = "EVENTS" )
public class Event {
    ...
}</programlisting>
        </example>

        <para>
          <!-- Is an entity an interface?? -->
          The <interfacename>@javax.persistence.Entity</interfacename> annotation is used to mark a class as an entity.
          It functions the same as the <varname>class</varname> mapping element discussed in <xref
          linkend="hibernate-gsg-tutorial-basic-mapping"/>.  Additionally the
          <interfacename>@javax.persistence.Table</interfacename> annotation explicitly specifies the table
          name. Without this specification, the default table name would be <database class="table">EVENT</database>).
        </para>

        <example xml:id="hibernate-gsg-tutorial-annotations-entity-id">
          <title>Identifying the identifier property</title>
          <programlisting role="JAVA">@Id
@GeneratedValue(generator="increment")
@GenericGenerator(name="increment", strategy = "increment")
public Long getId() {
    return id;
}</programlisting>
        </example>

        <para>
            <interfacename>@javax.persistence.Id</interfacename> marks the property which defines the
            entity's identifier.  <interfacename>@javax.persistence.GeneratedValue</interfacename> and
            <interfacename>@org.hibernate.annotations.GenericGenerator</interfacename> work in tandem
            to indicate that Hibernate should use Hibernate's <literal>increment</literal> generation
            strategy for this entity's identifier values.
        </para>

        <example xml:id="hibernate-gsg-tutorial-annotations-entity-properties">
          <title>Identifying basic properties</title>
          <programlisting role="JAVA">public String getTitle() {
    return title;
}

@Temporal(TemporalType.TIMESTAMP)
@Column(name = "EVENT_DATE")
public Date getDate() {
    return date;
}</programlisting>
        </example>

        <para>
            As in <xref linkend="hibernate-gsg-tutorial-basic-mapping"/>, the <varname>date</varname> property needs
            special handling to account for its special naming and its SQL type.
        </para>
    </section>

    <section xml:id="hibernate-gsg-tutorial-annotations-test">
        <title>Example code</title>
        <para>
            <classname>org.hibernate.tutorial.annotations.AnnotationsIllustrationTest</classname> is essentially the
            same as <classname>org.hibernate.tutorial.hbm.NativeApiIllustrationTest</classname> discussed in
            <xref linkend="hibernate-gsg-tutorial-basic-test"/>.
        </para>
    </section>

    <section xml:id="hibernate-gsg-tutorial-annotations-further">
        <title>Take it further!</title>
        <itemizedlist>
          <title>Practice Exercises</title>
          <listitem>
            <para>
              Add an association to the <classname>Event</classname> entity to model a message thread. Use the
              <citetitle pubwork="book">Developer Guide</citetitle> as a guide.
            </para>
          </listitem>
          <listitem>
            <para>
              Add a callback to receive notifications when an <classname>Event</classname> is created, updated or
              deleted.  Try the same with an event listener. Use the <citetitle pubwork="book">Developer
              Guide</citetitle> as a guide.
            </para>
          </listitem>
        </itemizedlist>
    </section>

</chapter>